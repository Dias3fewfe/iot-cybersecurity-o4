from flask import Flask, request, jsonify
import requests
import json

app = Flask(__name__)

# üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
BOT_TOKEN = "7286132933:AAGTxMXlBVFF62KeED_pnKodc6K3lrc1Hqs"
CHAT_ID = 699941829  # üîÅ ‚Üê –ü–æ–º–µ–Ω—è–π –Ω–∞ –°–í–û–ô chat_id

# üîî –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
def send_telegram_alert(message):
    url = f"https://api.telegram.org/bot{"7286132933:AAGTxMXlBVFF62KeED_pnKodc6K3lrc1Hqs"}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": message}
    try:
        response = requests.post(url, data=payload)
        print("üì§ Alert sent:", response.status_code)
    except Exception as e:
        print("‚ö†Ô∏è Telegram error:", str(e))


# ‚öôÔ∏è –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (O3 reasoning: Orient phase)
def analyze_context(threat, temp, condition):
    risk_score = 0
    reasons = []

    if threat == 1:
        risk_score += 2
        reasons.append("üß† ML predicted a threat.")

    if temp > 10:
        risk_score += 1
        reasons.append("üå° High temperature detected.")

    if condition == 1:
        risk_score += 1
        reasons.append("üî• Condition indicates 'high'.")

    if risk_score >= 3:
        level = "HIGH"
    elif risk_score == 2:
        level = "MEDIUM"
    elif risk_score == 1:
        level = "LOW"
    else:
        level = "NORMAL"

    return level, reasons

@app.route('/cloud', methods=['POST'])
@app.route('/cloud', methods=['POST'])
def cloud_layer():
    try:
        data = request.json

        context = {
            "source": "Fog Layer",
            "threat_type": data.get("Threat_Prediction"),
            "device_temp": data.get("Fridge_Temperature"),
            "condition": data.get("Temp_Condition")
        }

        level, reasons = analyze_context(
            data.get("Threat_Prediction"),
            data.get("Fridge_Temperature"),
            data.get("Temp_Condition")
        )

        # üîé Decide phase
        decision = "No action needed"
        if level == "LOW":
            decision = "üìù Log only"
        elif level == "MEDIUM":
            decision = "üîî Notify security officer"
        elif level == "HIGH":
            decision = "‚ùå Block device + notify admin"

        # ‚úÖ Act phase
        actions_taken = []
        if "notify" in decision:
            actions_taken.append("Sent Telegram alert")
            alert_msg = f"üö® Alert Level: {level}\nReasons:\n" + "\n".join(reasons) + f"\n\nDecision: {decision}\nContext: {context}"
            send_telegram_alert(alert_msg)
        if "block" in decision:
            actions_taken.append("Device blocked (simulated)")
        if "Log" in decision or level == "NORMAL":
            actions_taken.append("Logged to system")

        return jsonify({
            "status": "processed",
            "alert_level": level,
            "reasons": reasons,
            "decision": decision,
            "actions": actions_taken,
            "context": context
        })

    except Exception as e:
        return jsonify({"error": str(e)}), 500


# üì• –ü—Ä–æ—Å—Ç–æ–π upload-—ç–Ω–¥–ø–æ–∏–Ω—Ç 
@app.route('/upload', methods=['POST'])
def upload_endpoint():
    try:
        data = request.json
        print("üì¶ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç fog_layer:", data[:1])  # –ª–æ–≥ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏
        return jsonify({"status": "received", "count": len(data)})
    except Exception as e:
        return jsonify({"error": str(e)}), 500


if __name__ == '__main__':
    app.run(port=7000, debug=True)
